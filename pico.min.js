(function pico(){var call=Function.prototype.call,has=call.bind(Object.prototype.hasOwnProperty),toString=call.bind(Object.prototype.toString);function defineFunction(name,length,fn){return Object.defineProperties(fn,{name:new Constant(name),length:new Constant(length)})}function getPropertyDescriptor(target,name){var it;for(it=target;it!=null;it=Object.getPrototypeOf(it)){if(has(it,name)){return Object.getOwnPropertyDescriptor(it,name)}}return Object.create(null)}function toDescriptors(properties){var result=objectMap(properties,Hidden);if(has(properties,"constructor")){result.constructor=new Hidden(properties.constructor)}return result}function descriptorMap(object,_fn,thisArg){var i,name,result={},fn=_fn.bind(thisArg),names=Object.getOwnPropertyNames(object);for(i=0;i<names.length;++i){name=names[i];if(name==="length"||name==="constructor")continue;result[name]=fn(Object.getOwnPropertyDescriptor(object,name),name,object)}return result}function objectMap(object,_fn,thisArg){var i,key,result={},fn=_fn.bind(thisArg),keys=Object.keys(object);for(i=0;i<keys.length;++i){key=keys[i];if(key==="length"||key==="constructor")continue;result[key]=fn(object[key],key,object)}return result}function ElementDescriptor(name,length){this.name=name;this.length=length}ElementDescriptor.finderFor=function ElementDescriptor_finderFor(name,filter,mapper){return function filterMap(){var i,j,descriptor,result=Pico(this.length);for(i=0,j=0;i<this.length;++i){descriptor=getPropertyDescriptor(this[i],name);if(filter(descriptor)){result[j]=mapper.apply(this[i],arguments);j+=1}}result.length=j;return result}};ElementDescriptor.prototype=Object.create(null,{constructor:ElementDescriptor,enumerable:new Hidden(false),configurable:new Hidden(true),set:{get:function createSetter(){var name=this.name;return defineFunction("Pico$"+name,1,ElementDescriptor.finderFor(name,function setterFilter(descriptor){return descriptor.writable||descriptor.set},function setter(value){return this[name]=value}))}},get:{get:function createGetter(){if(isNaN(this.length)){return this._createGetter()}else{return this._createMethod()}}},_createGetter:{value:function ElementDescriptor$_createGetter(){var name=this.name;return defineFunction("Pico$"+name,0,ElementDescriptor.finderFor(name,function getterFilter(descriptor){return descriptor.get||"value"in descriptor},function getter(){return this[name]}))}},_createMethod:{value:function ElementDescriptor$_createMethod(){var name=this.name,method=Object.defineProperty(defineFunction("Pico$"+name,length,ElementDescriptor.finderFor(name,function methodFilter(descriptor){return typeof descriptor.value==="function"},function applyMethod(){return this[name].apply(this,arguments)})),"valueOf",new ValueOf(this._createGetter()));return function methodGetter(){return method}}}});function Constant(value){if(!(this instanceof Constant))return new Hidden(value);this.value=value}Constant.prototype=Object.assign(Object.create(null),{constructor:Constant,writable:false,enumerable:false,configurable:true});function Hidden(value){if(!(this instanceof Hidden))return new Hidden(value);this.value=value}Hidden.prototype=Object.assign(Object.create(null),{constructor:Hidden,writable:true,enumerable:false,configurable:true});function ValueOf(getter){var valueOf=defineFunction("valueOf",0,getter);this.get=function getValueOf(){return valueOf.bind(this)}}ValueOf.prototype=Object.create(null,toDescriptors({constructor:ValueOf,enumerable:false,configurable:true,get:null,set:function setValueOf(value){Object.defineProperty(this,"valueOf",new Hidden(value));return this.valueOf}}));function Pico(input){var context=this instanceof Element?this:document;switch(toString(input).slice(8,-1)){case"Null":case"Undefined":return Pico.from([]);case"Array":return Pico.from(input);case"String":return Pico.from(context.querySelectorAll(input));default:return Pico.from(new Array(input))}}window.$=window.Pico=Pico;Pico.from=function Pico_from(list){var result=Array.from(list);Object.setPrototypeOf(result,Pico.prototype);return result};Object.setPrototypeOf(Pico,Array);Pico.prototype=Object.create(Array.prototype,Object.assign(decorateArrayMethods(),decorateElementMethods(),toDescriptors({constructor:Pico,on:function Pico$on(_type,_listener,_useCapture){return this.addEventListener.apply(this,arguments)},off:function Pico$off(_type,_listener,_useCapture){return this.removeEventListener.apply(this,arguments)},once:function Pico$once(type,listener,useCapture){var self=this;return this.addEventListener(type,function once(){self.removeEventListener(type,once,useCapture);return listener.apply(this,arguments)},useCapture)}},{constructors:{get:defineFunction("Pico$constructors",0,ElementDescriptor.finderFor("constructor",function constructorFilter(descriptor){return descriptor.get||"value"in descriptor},function constructorGetter(){return this.constructor}))},lengths:{get:defineFunction("Pico$lengths",0,ElementDescriptor.finderFor("length",function lengthFilter(descriptor){return descriptor.get||"value"in descriptor},function lengthGetter(){return this.length}))}})));function decorateArrayMethods(){return descriptorMap(Array.prototype,function(descriptor,name){var original=descriptor.value;if(typeof original!=="function")return;descriptor.value=defineFunction(name,original.length,function(){var result=original.apply(this,arguments);if(Array.isArray(result))Object.setPrototypeOf(result,Pico.prototype);return result});return descriptor})}function decorateElementMethods(){return objectMap(Object.getOwnPropertyNames(window).filter(function(name){return/^(HTML|SVG).*Element$/.test(name)&&window[name]&&Element.prototype.isPrototypeOf(Object.getPrototypeOf(window[name]))}).concat("Element","EventTarget","Node").reduce(function maxNumberOfParameters(lengths,className){descriptorMap(window[className].prototype,function(descriptor,name){lengths[name]=+lengths[name];if(typeof descriptor.value==="function"){lengths[name]=Math.max(lengths[name]|0,descriptor.value.length)}return descriptor});return lengths},{}),function createElementDescriptor(length,name){return new ElementDescriptor(name,length)})}})();